apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'
apply from: 'gradle/pipeline.gradle'

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE"
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${project.hasProperty("scContractVersion") ? project.property("scContractVersion") : "1.1.1.RELEASE"}"
		// sc-pipelines & k8s
		classpath 'com.bmuschko:gradle-docker-plugin:3.1.0'
	}
}

group = 'com.example.github'
version = getProp('newVersion') ?: '0.0.1-SNAPSHOT'

ext {
	projectGroupId = project.group
	projectArtifactId = project.name
	projectVersion = project.version
	stubrunnerIds = 'com.example.github:github-webhook'
	// sc-pipelines & k8s
	dockerImagePrefix = getProp("DOCKER_REGISTRY_ORGANIZATION") ?: "scpipelines"
	dockerImageName = "${dockerImagePrefix}/${project.name}"
}

repositories {
	mavenCentral()
	mavenLocal()
	if (getProp("M2_LOCAL")) {
		maven {
			url getProp("M2_LOCAL")
		}
	}
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$BOM_VERSION"
	}
}

// sc-pipelines & k8s
// example of docker setup
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.*

docker {
	registryCredentials {
		url = getProp('DOCKER_REGISTRY_URL') ?: 'https://index.docker.io/v1/'
		username = getProp('DOCKER_USERNAME') ?: "changeme"
		password = getProp('DOCKER_PASSWORD') ?: "changeme"
		email = getProp('DOCKER_EMAIL') ?: "changeme"
	}
}

task createDockerfile(type: Dockerfile) {
	destFile = project.file('build/libs/Dockerfile')
	from 'frolvlad/alpine-oraclejdk8:slim'
	String sysProps = getProp("SYSTEM_PROPS") ?: "-Dfoo=bar"
	environmentVariable("SYSTEM_PROPS", sysProps)
	addFile("/${project.name}-${project.version}.jar", "/")
	entryPoint("sh", "-c", "java \${SYSTEM_PROPS} -Djava.security.egd=file:/dev/./urandom -jar /${project.name}-${project.version}.jar")
}

task buildImage(type: DockerBuildImage) {
	dependsOn([createDockerfile, jar, check])
	inputDir = createDockerfile.destFile.parentFile
	tags = ["${dockerImageName}".toString()] as Set<String>
}

task tagImage(type: DockerTagImage) {
	dependsOn([buildImage])
	targetImageId { buildImage.getImageId() }
	repository = "${dockerImageName}"
	tag = project.version
}

task pushLatestImage(type: DockerPushImage) {
	dependsOn([tagImage])
	imageName = "${dockerImageName}"
	tag = "latest"
}

task pushConcreteImage(type: DockerPushImage) {
	dependsOn([tagImage])
	imageName = "${dockerImageName}"
	tag = project.version
}

task pushImages {
	dependsOn([pushLatestImage, pushConcreteImage])
}

deploy.dependsOn pushImages

// sc-pipelines contract testing
if (gradle.startParameter.taskRequests.any { it.args.contains("apiCompatibility") }) {
	contracts {
		baseClassForTests = 'org.springframework.github.BaseClass'
		basePackageForTests = 'com.example.contracttests'
		// REPO_WITH_JARS is deprecated
		contractsRepositoryUrl = getProp('REPO_WITH_JARS') ?: getProp('REPO_WITH_BINARIES') ?: 'http://localhost:8081/artifactory/libs-release-local'
		contractsPath = "/"
		contractDependency {
			groupId = project.group
			artifactId = project.name
			delegate.classifier = "stubs"
			delegate.version = getProp("latestProductionVersion")
		}
	}
} else {
	contracts {
		baseClassForTests = 'org.springframework.github.BaseClass'
		basePackageForTests = 'com.example.contracttests'
	}
}

dependencies {
	compile ('org.springframework.analytics:spring-analytics:1.0.0.RELEASE')
	compile ('org.springframework.cloud:spring-cloud-starter-eureka')
	compile ('org.hibernate:hibernate-validator')
	compile ('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
	compile ('org.springframework.cloud:spring-cloud-starter-kubernetes:0.2.0.RELEASE')
	compile ('org.springframework.boot:spring-boot-starter-actuator')
	compile ('org.flywaydb:flyway-core')
	compile ('org.springframework.boot:spring-boot-starter-data-jpa')
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('com.h2database:h2')
	compile ('mysql:mysql-connector-java')
	compile ('io.micrometer:micrometer-spring-legacy:latest.release')
	compile ('io.micrometer:micrometer-registry-prometheus:latest.release')

	testCompile ('org.springframework.cloud:spring-cloud-starter-contract-stub-runner')
	testCompile ('org.springframework.cloud:spring-cloud-stream-test-support')
	testCompile ('org.springframework.cloud:spring-cloud-starter-contract-verifier')
	testCompile ('org.awaitility:awaitility:2.0.0')
}

publishing {
	repositories {
		maven {
			url getProp('REPO_WITH_BINARIES') ?: 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'admin'
				password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}
